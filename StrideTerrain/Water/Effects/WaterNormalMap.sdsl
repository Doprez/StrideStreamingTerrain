namespace StrideTerrain.Water.Effects
{
    shader WaterNormalMap : ComputeColor, Texturing, PositionStream4
    {
        rgroup PerMaterial
        {
            stage Texture2D NormalMap;
        }

        cbuffer PerMaterial
        {
            float2 Speed;
        }

        float3 DecodeNormal(float3 normal)
        {
            // Assume that we have to scale and reconstruct z the normal maps
            normal = (2.0f * normal) - 1.0f;
            normal.z = sqrt(max(0.01f, 1.0f - (normal.x * normal.x + normal.y * normal.y)));

            return normalize(normal);
        }

        override float4 Compute()
        {
            float2 uv = streams.PositionWS.xz * 0.1f;

            float2 speed = float2(0.05, 0.05);

            float3 normal1 = DecodeNormal(NormalMap.Sample(LinearRepeatSampler, uv + speed * Global.Time).xyz);
            float3 normal2 = DecodeNormal(NormalMap.Sample(LinearRepeatSampler, uv - speed * Global.Time).xyz);

            float3 normal = NormalUtil.BlendRNM(normal1, normal2);

		    return float4(normal1, 1);
        }
    };
}