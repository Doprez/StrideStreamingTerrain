namespace StrideTerrain.Rendering.Effects
{
    shader RadiancePrefilteringGGXShaderV2<uint TNbOfSamples, uint TBlockSize, uint TThreadOffload> : Math, ComputeShaderBase
    {
        // the input texture containing the radiance
        uint RadianceMapSize;
        float InvRadianceMapSize;
        TextureCube<float4> RadianceMap;

        // the output cube map containing the filtered radiance.
        RWTexture2DArray<float4> FilteredRadiance;
        uint FilteredRadianceMapSize;
            
        // Shared memory for summing SH-Basis coefficients for a block
        groupshared float4 PrefilteredSamples[TBlockSize][TBlockSize][TThreadOffload];
        
        // The number of mipmap available
        stage float MipmapCount;

        // The roughness of the GGX distribution
        stage float Roughness;

        // compute the pre-filtered environment map for input (group) direction
        override void Compute()
        {
            uint2 pixel = streams.DispatchThreadId.xy;
            uint face = streams.DispatchThreadId.z / TThreadOffload;

            float2 uv = (streams.DispatchThreadId.xy + 0.5f) * InvRadianceMapSize;

            // Calculate the direction of the texel in the cubemap
            float3 R = normalize(CubemapUtils.ConvertTexcoordsNoFlip(uv, face));

            float4 prefilteredColor = 0;
            uint threadStart = streams.DispatchThreadId.z % TThreadOffload;

            for (uint i = threadStart; i < TNbOfSamples; i += TThreadOffload)
            {
                // Perform one sampling, calculate pre-filtered color and weight contribution
                var xi = Hammersley.GetSamplePlane(i, TNbOfSamples);
                var H = ImportanceSamplingGGX.GetSample(xi, Roughness, R);
                
                float3 L = 2 * dot( R, H ) * H - R;
                float NoL = saturate( dot( R, L ) );
                float pdf = BRDFMicrofacet.NormalDistributionGGX(Roughness*Roughness, NoL) / 4;
                
                float4 sampleColor = 0;
                if( NoL > 0 )
                {
                    float omegaS = 1.0 / ( TNbOfSamples * pdf );
                    float omegaP = 4.0 * Math.PI / (6.0 * RadianceMapSize * RadianceMapSize ) ;
                    float mipLevel = clamp (0.5 * log2 ( omegaS / omegaP ) , 0, MipmapCount );

                    sampleColor = RadianceMap.SampleLevel(Texturing.LinearSampler, L, mipLevel) * NoL;
                }
                prefilteredColor += sampleColor;
            }

            // Stock the result in group-shared memory
            PrefilteredSamples[streams.GroupThreadId.x][streams.GroupThreadId.y][threadStart] = prefilteredColor;
		    GroupMemoryBarrierWithGroupSync();

            // Let the first thread stock the final result in output texture
            if (threadStart == 0)
            {
                float4 accumulation = 0;
                for (uint j = 0; j < TThreadOffload; ++j)
                {
                    accumulation += PrefilteredSamples[streams.GroupThreadId.x][streams.GroupThreadId.y][j];
                }

                if (accumulation.w > 0)
                    FilteredRadiance[uint3(streams.DispatchThreadId.xy, face)] = accumulation / accumulation.w;
                else
                    FilteredRadiance[uint3(streams.DispatchThreadId.xy, face)] = float4(0, 0, 0, 1);
            }
        }
    };
}