// <auto-generated>
// Do not edit this file yourself!
//
// This code was generated by Stride Shader Mixin Code Generator.
// To generate it yourself, please install Stride.VisualStudio.Package .vsix
// and re-save the associated .sdfx.
// </auto-generated>

using System;
using Stride.Core;
using Stride.Rendering;
using Stride.Graphics;
using Stride.Shaders;
using Stride.Core.Mathematics;
using Buffer = Stride.Graphics.Buffer;

namespace TR.Stride.Atmosphere
{
    [DataContract]public partial class AtmosphereParameters : ShaderMixinParameters
    {
        public static readonly PermutationParameterKey<bool> RenderSunDisk = ParameterKeys.NewPermutation<bool>(true);
        public static readonly PermutationParameterKey<string> AtmosphereGroup = ParameterKeys.NewPermutation<string>("PerDraw.Atmosphere");
    };
    internal static partial class ShaderMixins
    {
        internal partial class AtmosphereRenderSkyRayMarchingEffect  : IShaderMixinBuilder
        {
            public void Generate(ShaderMixinSource mixin, ShaderMixinContext context)
            {
                context.Mixin(mixin, "AtmosphereRenderSkyRayMarching", context.GetParam(AtmosphereParameters.RenderSunDisk), context.GetParam(AtmosphereParameters.AtmosphereGroup));
            }

            [System.Runtime.CompilerServices.ModuleInitializer]
            internal static void __Initialize__()

            {
                ShaderMixinManager.Register("AtmosphereRenderSkyRayMarchingEffect", new AtmosphereRenderSkyRayMarchingEffect());
            }
        }
    }
    internal static partial class ShaderMixins
    {
        internal partial class AtmosphereRenderTransmittanceLutEffect  : IShaderMixinBuilder
        {
            public void Generate(ShaderMixinSource mixin, ShaderMixinContext context)
            {
                context.Mixin(mixin, "AtmosphereRenderTransmittanceLut", context.GetParam(AtmosphereParameters.AtmosphereGroup));

                {
                    var __mixinToCompose__ = context.GetParam(AtmosphereShadowKeys.ShadowFunction);
                    var __subMixin = new ShaderMixinSource();
                    context.PushComposition(mixin, "ShadowFunction", __subMixin);
                    context.Mixin(__subMixin, __mixinToCompose__);
                    context.PopComposition();
                }
            }

            [System.Runtime.CompilerServices.ModuleInitializer]
            internal static void __Initialize__()

            {
                ShaderMixinManager.Register("AtmosphereRenderTransmittanceLutEffect", new AtmosphereRenderTransmittanceLutEffect());
            }
        }
    }
    internal static partial class ShaderMixins
    {
        internal partial class AtmosphereMultipleScatteringTextureEffect  : IShaderMixinBuilder
        {
            public void Generate(ShaderMixinSource mixin, ShaderMixinContext context)
            {
                context.Mixin(mixin, "AtmosphereMultipleScatteringTextureEffectCS", context.GetParam(AtmosphereParameters.AtmosphereGroup));

                {
                    var __mixinToCompose__ = context.GetParam(AtmosphereShadowKeys.ShadowFunction);
                    var __subMixin = new ShaderMixinSource();
                    context.PushComposition(mixin, "ShadowFunction", __subMixin);
                    context.Mixin(__subMixin, __mixinToCompose__);
                    context.PopComposition();
                }
            }

            [System.Runtime.CompilerServices.ModuleInitializer]
            internal static void __Initialize__()

            {
                ShaderMixinManager.Register("AtmosphereMultipleScatteringTextureEffect", new AtmosphereMultipleScatteringTextureEffect());
            }
        }
    }
    internal static partial class ShaderMixins
    {
        internal partial class AtmosphereRenderSkyViewLutEffect  : IShaderMixinBuilder
        {
            public void Generate(ShaderMixinSource mixin, ShaderMixinContext context)
            {
                context.Mixin(mixin, "AtmosphereRenderSkyViewLut", context.GetParam(AtmosphereParameters.AtmosphereGroup));

                {
                    var __mixinToCompose__ = context.GetParam(AtmosphereShadowKeys.ShadowFunction);
                    var __subMixin = new ShaderMixinSource();
                    context.PushComposition(mixin, "ShadowFunction", __subMixin);
                    context.Mixin(__subMixin, __mixinToCompose__);
                    context.PopComposition();
                }
            }

            [System.Runtime.CompilerServices.ModuleInitializer]
            internal static void __Initialize__()

            {
                ShaderMixinManager.Register("AtmosphereRenderSkyViewLutEffect", new AtmosphereRenderSkyViewLutEffect());
            }
        }
    }
    internal static partial class ShaderMixins
    {
        internal partial class AtmosphereRenderScatteringCameraVolumeEffect  : IShaderMixinBuilder
        {
            public void Generate(ShaderMixinSource mixin, ShaderMixinContext context)
            {
                context.Mixin(mixin, "AtmosphereRenderScatteringCameraVolume", context.GetParam(AtmosphereParameters.AtmosphereGroup));

                {
                    var __mixinToCompose__ = context.GetParam(AtmosphereShadowKeys.ShadowFunction);
                    var __subMixin = new ShaderMixinSource();
                    context.PushComposition(mixin, "ShadowFunction", __subMixin);
                    context.Mixin(__subMixin, __mixinToCompose__);
                    context.PopComposition();
                }
            }

            [System.Runtime.CompilerServices.ModuleInitializer]
            internal static void __Initialize__()

            {
                ShaderMixinManager.Register("AtmosphereRenderScatteringCameraVolumeEffect", new AtmosphereRenderScatteringCameraVolumeEffect());
            }
        }
    }
    internal static partial class ShaderMixins
    {
        internal partial class CloudRayMarchingEffect  : IShaderMixinBuilder
        {
            public void Generate(ShaderMixinSource mixin, ShaderMixinContext context)
            {
                context.Mixin(mixin, "CloudRayMarching", context.GetParam(AtmosphereParameters.AtmosphereGroup));
            }

            [System.Runtime.CompilerServices.ModuleInitializer]
            internal static void __Initialize__()

            {
                ShaderMixinManager.Register("CloudRayMarchingEffect", new CloudRayMarchingEffect());
            }
        }
    }
    internal static partial class ShaderMixins
    {
        internal partial class CloudBasicNoiseEffect  : IShaderMixinBuilder
        {
            public void Generate(ShaderMixinSource mixin, ShaderMixinContext context)
            {
                context.Mixin(mixin, "CloudBasicNoise");
            }

            [System.Runtime.CompilerServices.ModuleInitializer]
            internal static void __Initialize__()

            {
                ShaderMixinManager.Register("CloudBasicNoiseEffect", new CloudBasicNoiseEffect());
            }
        }
    }
    internal static partial class ShaderMixins
    {
        internal partial class CloudDetailNoiseEffect  : IShaderMixinBuilder
        {
            public void Generate(ShaderMixinSource mixin, ShaderMixinContext context)
            {
                context.Mixin(mixin, "CloudDetailNoise");
            }

            [System.Runtime.CompilerServices.ModuleInitializer]
            internal static void __Initialize__()

            {
                ShaderMixinManager.Register("CloudDetailNoiseEffect", new CloudDetailNoiseEffect());
            }
        }
    }
}
